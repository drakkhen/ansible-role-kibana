ldap_server ldap-{{ item.1.name }} {
  url {{ ldap_url }};
  connections: 1;
  max_down_retries_count: 9000;

  binddn {{ ldap_binddn }};
  binddn_passwd {{ ldap_binddn_passwd }};
  group_attribute {{ ldap_group_attribute }};
  group_attribute_is_dn {{ ldap_group_attribute_is_dn and 'on' or 'off' }};

{% if item.1.users is defined or item.1.groups is defined %}
  satisfy any;
  {%- if item.1.users is defined -%}
    {%- for user in item.1.users %}

  require user "{{ user }}";
    {%- endfor %}
  {%- endif -%}
  {% if item.1.groups is defined -%}
    {% for group in item.1.groups %}

  require group "{{ group }}";
    {%- endfor %}
  {%- endif %}
{%- else %}
  require valid_user;
{%- endif %}

}

server {
  server_name {{ kibana_hostname | regex_replace('^[^.]+\.', item.1.name + '.') }};
  {% if (nginx_ssl_key is defined) and (nginx_ssl_certificate is defined) -%}
  listen 443;
  ssl on;
  ssl_certificate /etc/ssl/kibana_nginx_proxy_ssl.crt;
  ssl_certificate_key /etc/ssl/kibana_nginx_proxy_ssl.key;
  {% else -%}
  listen 80;
  {% endif -%}

  ## Check if this certificate is really served for this server_name
  ##   http://serverfault.com/questions/578648/properly-setting-up-a-default-nginx-server-for-https
  if ($host != $server_name) {
    return 444;
  }

  auth_ldap "Forbidden";
  auth_ldap_servers ldap-{{ item.1.name }};

  location / {
    proxy_pass http://127.0.0.1:{{ 5601 + item.0 }};
  }
}

{% if (nginx_ssl_key is defined) and (nginx_ssl_certificate is defined) -%}
server {
  server_name {{ kibana_hostname | regex_replace('^[^.]+\.', item.1.name + '.') }};
  listen 80;
  return 301 https://{{ kibana_hostname | regex_replace('^[^.]+\.', item.1.name + '.') }}$request_uri;
}
{%- endif -%}
