---
- set_fact:
    kibana_etc: /opt/kibana/config
  when: kibana_repo_version == '4.x'

- set_fact:
    kibana_etc: /etc/kibana
  when: kibana_repo_version == '5.x'

- include: setup-RedHat.yml
  when: ansible_os_family == 'RedHat'

- include: setup-Debian.yml
  when: ansible_os_family == 'Debian'

- name: Install Kibana.
  package: name=kibana state=present

#################################
##   Single Kibana instance    ##
#################################
- name: Ensure Kibana systemd service definition is up-to-date
  become: yes
  template:
    src: templates/systemd-kibana.service.j2
    dest: /etc/systemd/system/kibana.service
    owner: root
    group: root
    mode: 0664
  notify:
    - reload systemd
    - restart kibana
  when: kibana_instances is not defined

- name: Ensure Kibana is started and enabled at boot.
  service:
    name: kibana
    state: started
    enabled: yes
  when: kibana_instances is not defined

- name: Copy Kibana configuration.
  template:
    src: kibana.yml.j2
    dest: "{{ kibana_etc }}/kibana.yml"
    owner: root
    group: root
    mode: 0644
  notify: restart kibana
  when: kibana_instances is not defined

- name: Copy Kibana SSL key
  become: yes
  copy:
    content: "{{ kibana_server_ssl_key }}"
    dest: "{{ kibana_etc }}/kibana_server_ssl.key"
    owner: kibana
    group: kibana
    mode: 0600
  notify: restart kibana
  when: (kibana_instances is not defined) and (kibana_server_ssl_key is defined)

- name: Copy Kibana SSL certificate
  become: yes
  copy:
    content: "{{ kibana_server_ssl_certificate }}"
    dest: "{{ kibana_etc }}/kibana_server_ssl.crt"
    owner: kibana
    group: kibana
    mode: 0644
  notify: restart kibana
  when: (kibana_instances is not defined) and (kibana_server_ssl_certificate is defined)

#################################
##  Multiple Kibana instances  ##
#################################

- name: Remove default Kibana service
  file:
    path: /etc/systemd/system/kibana.service
    state: absent
  notify:
    - reload systemd
    - restart kibana
  when: kibana_instances is defined

- name: Ensure Kibana systemd service definitions are up-to-date
  become: yes
  template:
    src: templates/systemd-kibana.service.j2
    dest: /etc/systemd/system/kibana-{{ item.name }}.service
    owner: root
    group: root
    mode: 0664
  with_items: "{{ kibana_instances }}"
  notify:
    - reload systemd
    - restart kibana
  when: kibana_instances is defined

- name: Ensure Kibana services are started and enabled at boot.
  service:
    name: kibana-{{ item.name }}
    state: started
    enabled: yes
  with_items: "{{ kibana_instances }}"
  when: kibana_instances is defined

- name: Copy Kibana configurations
  vars:
    kibana_server_port: "{{ 5601 + item.0 }}"
    kibana_server_host: localhost
    kibana_elasticsearch_username: "kibana-{{ item.1.name }}"
    kibana_index_name: ".kibana-{{ item.1.name }}"
  template:
    src: kibana.yml.j2
    dest: "{{ kibana_etc }}/kibana-{{ item.1.name }}.yml"
    owner: root
    group: root
    mode: 0644
  with_indexed_items: "{{ kibana_instances }}"
  notify: restart kibanas
  when: kibana_instances is defined

- name: Ensure default nginx packages are not installed
  apt:
    name: "{{ item }}"
    state: absent
  with_items:
    - nginx
    - nginx-common
    - nginx-core
  when: kibana_instances is defined

- name: Install nginx dependencies
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - libpcre3
    - libpcre3-dev
    - libldap-dev
    - libssl-dev
    - libxslt1-dev
    - libgd-dev
    - libgeoip-dev
    - zlib1g-dev
  when: kibana_instances is defined

- name: Ensure nginx source code is available
  get_url:
    url:  http://nginx.org/download/nginx-1.9.9.tar.gz
    checksum: "sha1:8262504469b86b967cdeb0821607a94ce863dfb4"
    dest: /usr/local/src/nginx-1.9.9.tar.gz
    owner: root
    group: root
    mode: 0600
  when: kibana_instances is defined

- name: Clone or update nginx-auth-ldap git repository
  become: yes
  git:
#    repo: "https://github.com/kvspb/nginx-auth-ldap.git"
    repo: "https://github.com/dkiser/nginx-auth-ldap.git"
    version: max_down_retries  # PR from dkiser
    dest: "/usr/local/src/nginx-auth-ldap"
    force: yes
  when: kibana_instances is defined
  register: nginx_auth_ldap_code

- name: Extract nginx
  become: yes
  unarchive:
    src: /usr/local/src/nginx-1.9.9.tar.gz
    dest: /usr/local/src
    remote_src: yes
  when: kibana_instances is defined
  register: nginx_source_code

- name: Configure nginx
  become: yes
  command: ./configure --with-cc-opt='-g -O2 -fPIE -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2' --with-ld-opt='-Wl,-Bsymbolic-functions -fPIE -pie -Wl,-z,relro -Wl,-z,now' --prefix=/usr/share/nginx --conf-path=/etc/nginx/nginx.conf --http-log-path=/var/log/nginx/access.log --error-log-path=/var/log/nginx/error.log --lock-path=/var/lock/nginx.lock --pid-path=/run/nginx.pid --http-client-body-temp-path=/var/lib/nginx/body --http-fastcgi-temp-path=/var/lib/nginx/fastcgi --http-proxy-temp-path=/var/lib/nginx/proxy --http-scgi-temp-path=/var/lib/nginx/scgi --http-uwsgi-temp-path=/var/lib/nginx/uwsgi --with-debug --with-pcre-jit --with-ipv6 --with-http_ssl_module --with-http_stub_status_module --with-http_realip_module --with-http_auth_request_module --with-http_addition_module --with-http_dav_module --with-http_geoip_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_image_filter_module --with-http_v2_module --with-http_sub_module --with-http_xslt_module --with-stream --with-stream_ssl_module --with-mail --with-mail_ssl_module --with-threads --add-module=/usr/local/src/nginx-auth-ldap
  args:
    chdir: /usr/local/src/nginx-1.9.9
  when: nginx_source_code.changed or nginx_auth_ldap_code.changed
  notify: restart nginx

- name: Compile nginx
  become: yes
  command: make
  args:
    chdir: /usr/local/src/nginx-1.9.9
  when: nginx_source_code.changed or nginx_auth_ldap_code.changed

- name: Install nginx
  become: yes
  command: make install
  args:
    chdir: /usr/local/src/nginx-1.9.9
  when: nginx_source_code.changed or nginx_auth_ldap_code.changed
  notify: restart nginx

- name: Ensure nginx configuration directories exist
  become: yes
  file:
    dest: "/etc/nginx/{{ item }}"
    state: directory
    owner: root
    group: root
    mode: 0755
  with_items:
    - conf.d
    - sites-available
    - sites-enabled
  when: kibana_instances is defined

- name: Ensure nginx var/lib directories exist
  become: yes
  file:
    dest: "/var/lib/{{ item }}"
    state: directory
    owner: www-data
    group: www-data
    mode: 0700
  with_items:
    - nginx
    - nginx/body
    - nginx/fastcgi
    - nginx/proxy
    - nginx/scgi
    - nginx/uwsgi
  when: kibana_instances is defined

- name: Ensure main nginx.conf is current
  become: yes
  template:
    src: templates/nginx.conf.j2
    dest: /etc/nginx/nginx.conf
    owner: root
    group: root
    mode: 0644
  when: kibana_instances is defined
  notify: restart nginx

- name: Configure nginx systemd service
  become: yes
  template:
    src: templates/systemd-nginx.service.j2
    dest: /lib/systemd/system/nginx.service
    owner: root
    group: root
    mode: 0644
  notify:
    - reload systemd
    - restart nginx
  when: kibana_instances is defined

- name: Symlink nginx systemd service
  become: yes
  file:
    src: /lib/systemd/system/nginx.service
    dest: /etc/systemd/system/multi-user.target.wants/nginx.service
    state: link
  notify:
    - reload systemd
    - restart nginx
  when: kibana_instances is defined

- name: Configure default nginx site
  template:
    src: templates/nginx_default_site.j2
    dest: /etc/nginx/sites-available/default
    owner: root
    group: root
    mode: 0644
  notify: restart nginx
  when: kibana_instances is defined

- name: Enable default nginx site
  file:
    src: /etc/nginx/sites-available/default
    dest: /etc/nginx/sites-enabled/default
    state: link
  notify: restart nginx
  when: kibana_instances is defined

- name: Configure nginx reverse proxy sites
  template:
    src: templates/nginx_reverse_proxy_site.j2
    dest: /etc/nginx/sites-available/{{ item.1.name }}
    owner: root
    group: root
    mode: 0644
  with_indexed_items: "{{ kibana_instances }}"
  notify: restart nginx
  when: kibana_instances is defined

- name: Copy nginx SSL key
  become: yes
  copy:
    content: "{{ nginx_ssl_key }}"
    dest: "/etc/ssl/kibana_nginx_proxy_ssl.key"
    owner: root
    group: root
    mode: 0600
  notify: restart nginx
  when: (kibana_instances is defined) and (nginx_ssl_key is defined)

- name: Copy nginx SSL certificate
  become: yes
  copy:
    content: "{{ nginx_ssl_certificate }}"
    dest: "/etc/ssl/kibana_nginx_proxy_ssl.crt"
    owner: root
    group: root
    mode: 0600
  notify: restart nginx
  when: (kibana_instances is defined) and (nginx_ssl_certificate is defined)

- name: Enable nginx sites
  file:
    src: /etc/nginx/sites-available/{{ item.name }}
    dest: /etc/nginx/sites-enabled/{{ item.name }}
    state: link
  with_items: "{{ kibana_instances }}"
  notify: restart nginx
  when: kibana_instances is defined

- name: Remove default Kibana configuration
  file:
    path: "{{ kibana_etc }}/kibana.yml"
    state: absent
  when: kibana_instances is defined

##  Cleanup old instances, if needed
- name: Terminate decomissioned Kibana instance services
  service:
    name: kibana-{{ item }}
    state: stopped
    enabled: no
  with_items: "{{ decomissioned_kibana_instances }}"
  ignore_errors: yes
  when: decomissioned_kibana_instances is defined

- name: Remove decomissioned Kibana instance systemd service definitions
  become: yes
  file:
    path: /etc/systemd/system/kibana-{{ item }}.service
    state: absent
  with_items: "{{ decomissioned_kibana_instances }}"
  notify:
    - reload systemd
    - restart kibana
  ignore_errors: yes
  when: decomissioned_kibana_instances is defined

- name: Remove decomissioned Kibana instance configurations
  file:
    path: "{{ kibana_etc }}/kibana-{{ item }}.yml"
    state: absent
  with_items: "{{ decomissioned_kibana_instances }}"
  notify: restart kibanas
  ignore_errors: yes
  when: decomissioned_kibana_instances is defined

- name: Disable decomissioned Kibana nginx sites
  file:
    path: /etc/nginx/sites-enabled/{{ item }}
    state: absent
  with_items: "{{ decomissioned_kibana_instances }}"
  notify: restart nginx
  ignore_errors: yes
  when: decomissioned_kibana_instances is defined

- name: Remove decomissioned Kibana instance nginx reverse proxy sites
  file:
    path: /etc/nginx/sites-available/{{ item }}
    state: absent
  with_items: "{{ decomissioned_kibana_instances }}"
  notify: restart nginx
  ignore_errors: yes
  when: decomissioned_kibana_instances is defined
